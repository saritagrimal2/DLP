Salto de Carro	Delimitador de Instrucciones.

'			Comentario hasta final de línea.

Instrucciones Push
	pushb <ASCII_code>		Apila el caracter (1 byte) en la pila
	push[i] <int_constant> 	Apila el entero (2 bytes) en la pila
	pushf <real_constant> 	Apila el número real (4 bytes) en la pila
	pusha <int_constant> 	Apila la dirección (entero, 2 bytes) en la pila
	push[a] bp 				Apila el valor del registro bp (2 bytes)

Instrucciones load y store
	loadb, load[i], loadf		Desapila una direccion de memoria de la pila (2 bytes). 
								A continuación, apila en la pila el contenido (1, 2 or 4 bytes) de la direccion extraida en el paso anterior.
	storeb, store[i], storef	Desapila de la pila 1, 2 o 4 bytes. 
								A continuación, desapila de la pila una dirección de memoria (2 bytes). 
								Se sustituye el contenido de la direcciónn de memoria con el valor extraido en el primer paso.

Instrucciones pop y dup
	popb, pop[i], popf 	Desapila 1, 2 o 4 bytes, respectivamente, de la pila
	dupb, dup[i], dupf 	Duplica 1, 2 o 4 bytes, respectivamente, del tope de la pila

Instrucciones aritmeticas. 
	Desapilan dos operandos, realizan la operacion y apilan el resultado.
	add[i], addf 	Para suma
	sub[i], subf 	Para resta
	mul[i], mulf 	Para multiplicacion
	div[i], divf 	Para division
	mod[i], modf 	Para modulo

Instrucciones de comparacion. 
	Desapilan dos operandos, realizan la operacion y apilan el resultado.
	gt[i], gtf 		Para comparación "mayor que"
	lt[i], ltf 		Para comparación "menor que"
	ge[i], gef 		Para comparación "mayor o igual que"
	le[i], lef 		Para comparación "menor o igual que"
	eq[i], eqf 		Para comparación "igual que"
	ne[i], nef 		Para comparación "no igual que"

Instrucciones logicas. 
	Desapilan dos operandos, realizan la operacion y apilan el resultado.
	and 			Para la operacion logica "and"
	or 				Para la operacion logica "or"
	not				Para la operacion logica unaria "not"

Intrudcciones input y output
	outb, out[i], outf 	Desapila un valor de la pila y lo muestra en la consola
	inb, in[i], inf 	Lee un valor por teclado y lo apila en la pila

Instrucciones de conversion
	b2i 	Desapila un caracter y lo apila como entero.
	i2f 	Desapila un entero y lo apila como un número real.
	f2i 	Desapila un número real y lo apila como entero.
	i2b 	Desapila un entero y lo apila como carácter.
	
Instruciones de salto
	<id>:			Define una etiqueta para realizar saltos e invocaciones (a funciones).
	jmp <label>		(en un if else, cuando estas al final de la rama del verdadero) Salta (incondicionalmente) a la etiqueta especificada como parametro.
	jz <label>		(despues del if o while en la rama de lo no verdadesro) Toma un entero de la pila y salta a la etiqueta si el valor extraido es cero.
	jnz <label>		Toma un entero de la pila y salta a la etiqueta si el valor extraido no es cero.

Funciones
	<id>:					Define una etiqueta para saltos e invocaciones (funciones)
	call <id> 				(es como un salto)Invoca la funcion <id>
	enter <int_constant> 	(Para las variables locales)Reserva <int_constant> bytes en el tope de la pila
	ret 					Retorna desde la invocación a una función
		<int_constant>,		La primera constante indica los bytes a devolver;
	    <int_constant>, 	la segunda, el numero total de bytes de las variables locales; 
        <int_constant> 		y la última, el numero total de bytes de los parametros.				

Finalización del programa		
	halt 	Termina la ejecución del programa

Informacion de debug
	#source <string_constant> 	Permite al IDE de MAPL asociaciar el codigo ensamblador con el código en alto nivel.
	#line <INT_CONSTANT> 		Permite al IDE de MAPL asociaciar el codigo ensamblador con la correspondiente sentencia en alto nivel.
				


